from algebra import mod_inv, int_to_bytes
from random import randint
from sympy import isprime  # Import isprime from sympy

# Key generation
def generate_keys(bit_length=512):
    def generate_prime(bit_length):
        while True:
            candidate = randint(2**(bit_length - 1), 2**bit_length - 1)
            if isprime(candidate):  # Check if the candidate is prime
                return candidate

    p = generate_prime(bit_length)  # Prime modulus
    g = randint(2, p - 1)          # Generator
    private_key = randint(2, p - 2)  # Private key
    public_key = pow(g, private_key, p)  # Public key
    return p, g, private_key, public_key

# Encryption
def encrypt(p, g, public_key, m):
    k = randint(2, p - 2)          # Random ephemeral key
    r = pow(g, k, p)              # r = g^k mod p
    s = pow(public_key, k, p)     # s = y^k mod p
    c = (s * pow(g, m, p)) % p    # c = s * g^m mod p
    return r, c

# Decryption
def decrypt(p, private_key, r, c):
    s = pow(r, private_key, p)   # Shared secret s = r^x mod p
    s_inverse = mod_inv(s, p)   # Modular inverse of s
    g_m = (c * s_inverse) % p   # g^m = c * s^(-1) mod p
    return g_m

# Brute-force m from g^m
def recover_message(p, g, g_m, max_message_value):
    for m in range(max_message_value):
        if pow(g, m, p) == g_m:
            return m
    return -1

# Example usage
if __name__ == "__main__":
    # Generate keys
    p, g, private_key, public_key = generate_keys()

    print(f"p = {p}")
    print(f"g = {g}")
    print(f"Private Key = {private_key}")
    print(f"Public Key = {public_key}")

    # Example messages
    messages = [1, 0, 1, 1, 0]
    encrypted_values = []

    # Encrypt messages
    print("\nEncryption:")
    for m in messages:
        r, c = encrypt(p, g, public_key, m)
        encrypted_values.append((r, c))
        print(f"m={m}, r={r}, c={c}")

    # Combine ciphertexts homomorphically
    combined_r = 1
    combined_c = 1
    for r, c in encrypted_values:
        combined_r = (combined_r * r) % p
        combined_c = (combined_c * c) % p

    print(f"\nCombined r: {combined_r}")
    print(f"Combined c: {combined_c}")

    # Decrypt combined ciphertext
    g_m = decrypt(p, private_key, combined_r, combined_c)
    print(f"\nDecrypted g^m: {g_m}")

    # Recover m
    recovered_m = recover_message(p, g, g_m, max_message_value=10)
    print(f"Recovered m: {recovered_m}, Expected m: {sum(messages) % 10}")
